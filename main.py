import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional
from uuid import uuid4

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "8244351005:AAF9y3P7CK9lT2hIXFDlGaDg8BY1Dh2FBXs"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∂–∞–ª–æ–±
COMPLAINT_TYPES = [
    "–ñ–µ—Å—Ç–æ–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –¥–µ—Ç—å–º–∏",
    "–ù–∞—Å–∏–ª–∏–µ",
    "–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
    "–∑–∞ —Å—Ä–æ–ª–∏–Ω–≥",
    "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
    "–¢–µ—Ä—Ä–æ—Ä–∏–∑–º",
    "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Å–ø–∞–º",
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤",
    "–î—Ä—É–≥–æ–µ",
    "–ù–µ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω, –Ω–æ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å"
]

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class ComplaintStates(StatesGroup):
    wait_for_link = State()
    wait_for_type = State()
    wait_for_confirmation = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class Moderator:
    def __init__(self, user_id: int, username: str, rating: float = 5.0, total_reviews: int = 0):
        self.user_id = user_id
        self.username = username
        self.rating = rating
        self.total_reviews = total_reviews

class Complaint:
    def __init__(self, complaint_id: str, user_id: int, username: str, link: str, complaint_type: str):
        self.complaint_id = complaint_id
        self.user_id = user_id
        self.username = username
        self.link = link
        self.complaint_type = complaint_type
        self.status = "pending"  # pending, in_progress, approved, rejected
        self.moderator_id = None
        self.created_at = datetime.now()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
complaints_db: Dict[str, Complaint] = {}
moderators_db: Dict[int, Moderator] = {}
user_complaints: Dict[int, str] = {}  # user_id -> complaint_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
def initialize_moderators():
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    moderators_data = [
        (7246667404, "IovesusIika"),
        (1610843750, "vkdistopia"),
        (8423284962, "splicer33"),
    ]
    
    for user_id, username in moderators_data:
        moderators_db[user_id] = Moderator(user_id, username)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="moderators_list"),
        InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", callback_data="file_complaint")
    )
    return keyboard.as_markup()

def get_complaint_types_keyboard():
    keyboard = InlineKeyboardBuilder()
    for i, complaint_type in enumerate(COMPLAINT_TYPES):
        keyboard.add(InlineKeyboardButton(
            text=complaint_type, 
            callback_data=f"complaint_type_{i}"
        ))
    keyboard.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    return keyboard.as_markup()

def get_confirmation_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_complaint"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_complaint")
    )
    return keyboard.as_markup()

def get_moderation_keyboard(complaint_id: str):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data=f"accept_{complaint_id}"),
        InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{complaint_id}")
    )
    return keyboard.as_markup()

def get_rating_keyboard(complaint_id: str, moderator_id: int):
    keyboard = InlineKeyboardBuilder()
    for rating in [5, 4, 3, 2, 1]:
        keyboard.add(InlineKeyboardButton(
            text=str(rating), 
            callback_data=f"rate_{complaint_id}_{moderator_id}_{rating}"
        ))
    return keyboard.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—Ä—É—à–∞—é—â–∏–π –ø—Ä–∞–≤–∏–ª–∞ TOS. "
        "–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@router.callback_query(F.data == "moderators_list")
async def show_moderators(callback: CallbackQuery):
    if not moderators_db:
        await callback.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
        return
    
    moderators_text = "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for moderator in moderators_db.values():
        moderators_text += f"@{moderator.username} | ID: {moderator.user_id} | –†–µ–π—Ç–∏–Ω–≥: {moderator.rating:.1f}‚≠ê\n"
    
    await callback.message.edit_text(moderators_text)
    await callback.answer()

@router.callback_query(F.data == "file_complaint")
async def start_complaint(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ComplaintStates.wait_for_link)
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–∫–∞–Ω–∞–ª/–±–æ—Ç/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):"
    )
    await callback.answer()

@router.message(ComplaintStates.wait_for_link)
async def process_link(message: Message, state: FSMContext):
    link = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    if not (link.startswith('http') or link.startswith('t.me')):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏ –Ω–æ—Ä–º —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä: https://t.me/. –¢–æ–∫ –ø—É–±–ª—á–∏—á–Ω—ã–µ —á–∞—Ç—ã –ø–ª—Å")
        return
    
    await state.update_data(link=link)
    await state.set_state(ComplaintStates.wait_for_type)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=get_complaint_types_keyboard()
    )

@router.callback_query(F.data.startswith("complaint_type_"))
async def process_complaint_type(callback: CallbackQuery, state: FSMContext):
    type_index = int(callback.data.split("_")[2])
    complaint_type = COMPLAINT_TYPES[type_index]
    
    await state.update_data(complaint_type=complaint_type)
    await state.set_state(ComplaintStates.wait_for_confirmation)
    
    data = await state.get_data()
    
    confirmation_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:\n\n"
        f"–°—Å—ã–ª–∫–∞: {data['link']}\n"
        f"–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è: {complaint_type}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    await callback.message.edit_text(confirmation_text, reply_markup=get_confirmation_keyboard())
    await callback.answer()

@router.callback_query(F.data == "confirm_complaint")
async def confirm_complaint(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É
    complaint_id = str(uuid4())[:8]
    complaint = Complaint(
        complaint_id=complaint_id,
        user_id=callback.from_user.id,
        username=callback.from_user.username or f"User_{callback.from_user.id}",
        link=data['link'],
        complaint_type=data['complaint_type']
    )
    
    complaints_db[complaint_id] = complaint
    user_complaints[callback.from_user.id] = complaint_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    await notify_moderators(complaint)
    
    await callback.message.edit_text(
        "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è."
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_complaint")
async def cancel_complaint(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
async def notify_moderators(complaint: Complaint):
    complaint_text = (
        "üì¢ –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{complaint.username}\n"
        f"üÜî ID: {complaint.user_id}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {complaint.link}\n"
        f"üìã –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è: {complaint.complaint_type}\n"
        f"üÜî ID –∂–∞–ª–æ–±—ã: {complaint.complaint_id}"
    )
    
    for moderator in moderators_db.values():
        try:
            await bot.send_message(
                moderator.user_id,
                complaint_text,
                reply_markup=get_moderation_keyboard(complaint.complaint_id)
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator.user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data.startswith("accept_"))
async def accept_complaint(callback: CallbackQuery):
    complaint_id = callback.data.split("_")[1]
    
    if complaint_id not in complaints_db:
        await callback.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint = complaints_db[complaint_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    if callback.from_user.id not in moderators_db:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç–∞ –ª–∏ —É–∂–µ –∂–∞–ª–æ–±–∞ –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    if complaint.status != "pending":
        await callback.answer("–≠—Ç–∞ –∂–∞–ª–æ–±–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
    complaint.status = "in_progress"
    complaint.moderator_id = callback.from_user.id
    moderator = moderators_db[callback.from_user.id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            complaint.user_id,
            f"–í–∞—à—É –∂–∞–ª–æ–±—É –ø—Ä–∏–Ω—è–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä @{moderator.username}. –û—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:",
            reply_markup=get_rating_keyboard(complaint_id, moderator.user_id)
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {complaint.user_id}: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    await callback.message.edit_text(
        f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∂–∞–ª–æ–±—É {complaint_id} –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n"
        f"–°—Å—ã–ª–∫–∞: {complaint.link}\n"
        f"–¢–∏–ø: {complaint.complaint_type}"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def reject_complaint(callback: CallbackQuery, state: FSMContext):
    complaint_id = callback.data.split("_")[1]
    
    if complaint_id not in complaints_db:
        await callback.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint = complaints_db[complaint_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if callback.from_user.id not in moderators_db:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∂–∞–ª–æ–±—É –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—É—é
    complaint.status = "rejected"
    complaint.moderator_id = callback.from_user.id
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            complaint.user_id,
            f"–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. "
            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {complaint.user_id}: {e}")
    
    await callback.message.edit_text(f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∂–∞–ª–æ–±—É {complaint_id}")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data.startswith("rate_"))
async def rate_moderator(callback: CallbackQuery):
    parts = callback.data.split("_")
    complaint_id = parts[1]
    moderator_id = int(parts[2])
    rating = int(parts[3])
    
    if complaint_id not in complaints_db:
        await callback.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint = complaints_db[complaint_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫—É —Å—Ç–∞–≤–∏—Ç –∞–≤—Ç–æ—Ä –∂–∞–ª–æ–±—ã
    if callback.from_user.id != complaint.user_id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ç—É –∂–∞–ª–æ–±—É")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if moderator_id in moderators_db:
        moderator = moderators_db[moderator_id]
        total_rating = moderator.rating * moderator.total_reviews
        moderator.total_reviews += 1
        moderator.rating = (total_rating + rating) / moderator.total_reviews
        
        # –ü–æ–º–µ—á–∞–µ–º –∂–∞–ª–æ–±—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        complaint.status = "approved"
        
        await callback.message.edit_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{moderator.username} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ {moderator.rating:.1f}‚≠ê"
        )
    else:
        await callback.answer("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    initialize_moderators()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
