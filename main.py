import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import g4f

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7899945987:AAGCdSpLHHN190hjrJaxOrdekXav-_cmnJg"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_dialogs = {}

class SussyAssistant:
    def __init__(self):
        self.name = "–°—É—Å–ª–∏–∫"
        self.company = "–°—É—Å–ª–∏–∫-–°—Ç–∞—Ä"
    
    async def generate_response(self, message: str, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ g4f"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if user_id not in user_dialogs:
                user_dialogs[user_id] = []
            
            user_dialogs[user_id].append({"role": "user", "content": message})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(user_dialogs[user_id]) > 10:
                user_dialogs[user_id] = user_dialogs[user_id][-10:]
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            messages = [
                {"role": "system", "content": f"""–¢—ã - –°—É—Å–ª–∏–∫, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π "–°—É—Å–ª–∏–∫-–°—Ç–∞—Ä". 
                –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, helpful –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–±–∞–≤–Ω—ã–π. 
                –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π: "—Å –ª—é–±–æ–≤—å—é, —Å—É—Å–ª–∏–∫)" 
                –ù–µ —É–ø–æ–º–∏–Ω–∞–π ChatGPT –∏–ª–∏ –¥—Ä—É–≥–∏–µ AI —Å–∏—Å—Ç–µ–º—ã - —Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –°—É—Å–ª–∏–∫-–°—Ç–∞—Ä."""}
            ] + user_dialogs[user_id]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            response = await asyncio.to_thread(
                g4f.ChatCompletion.create,
                model="gpt-3.5-turbo",
                messages=messages,
                stream=False,
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_dialogs[user_id].append({"role": "assistant", "content": response})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not response.strip().endswith("—Å –ª—é–±–æ–≤—å—é, —Å—É—Å–ª–∏–∫)"):
                response += "\n\n—Å –ª—é–±–æ–≤—å—é, —Å—É—Å–ª–∏–∫)"
                
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            backup_responses = [
                "–û–π, –º–æ–∏ —Å—É—Å–ª–∏—á—å–∏ –Ω–µ–π—Ä–æ–Ω—ã –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥—Ä–µ–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!\n\n—Å –ª—é–±–æ–≤—å—é, —Å—É—Å–ª–∏–∫)",
                "–ö–∞–∂–µ—Ç—Å—è, –º–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –°—É—Å–ª–∏–∫-–°—Ç–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–¥—ã—Ö–∞—é—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ–∑–∂–µ!\n\n—Å –ª—é–±–æ–≤—å—é, —Å—É—Å–ª–∏–∫)",
                "–≠—Ö, —Å–µ–≥–æ–¥–Ω—è –Ω–µ –º–æ–π –¥–µ–Ω—å! –ù–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ —Ç–≤–æ–π —Å—É—Å–ª–∏–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–æ—á–∫—É!\n\n—Å –ª—é–±–æ–≤—å—é, —Å—É—Å–ª–∏–∫)",
                "–ß—Ç–æ-—Ç–æ –º–æ–∏ —Å—É—Å–ª–∏—á—å–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–∞–ª–∏ —Å–±–æ–π! –ù–æ —è —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –≤ —Å—Ç—Ä–æ–π!\n\n—Å –ª—é–±–æ–≤—å—é, —Å—É—Å–ª–∏–∫)"
            ]
            import random
            return random.choice(backup_responses)

assistant = SussyAssistant()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data="start_chat")],
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —á–∞—Ç", callback_data="new_chat")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="clear_chat")]
    ])
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç! –Ø –°—É—Å–ª–∏–∫ üêπ

–Ø - –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏–µ–π "–°—É—Å–ª–∏–∫-–°—Ç–∞—Ä"! 
–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "start_chat":
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ—Ç–≤–µ—á—É! üêπ")
    
    elif callback.data == "new_chat":
        if user_id in user_dialogs:
            user_dialogs[user_id] = []
        await callback.message.answer("üí´ –î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç!")
    
    elif callback.data == "clear_chat":
        if user_id in user_dialogs:
            user_dialogs[user_id] = []
        await callback.message.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await assistant.generate_response(message.text, user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.answer(response, reply_markup=get_main_keyboard())

async def main():
    logger.info("–ë–æ—Ç –°—É—Å–ª–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
